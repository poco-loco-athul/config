#+TITLE: Emacs configuration

* Basic preferences

#+BEGIN_SRC emacs-lisp
(server-start)
(setq inhibit-startup-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Macro to reset file
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd"C-c r") (lambda ()
                               (interactive)
                               (revert-buffer t t t)
(message "buffer is reverted")))
#+END_SRC

** No backup
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC
   
** Prevent noise when C-g is hit
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Parenthesis (Highlights and pair)
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(show-paren-mode 1)
#+END_SRC

** Renaming frame-title
#+BEGIN_SRC emacs-lisp
(setq frame-title-format
	'(buffer-file-name "%f"
			   (dired-directory dired-directory "%b")))
#+END_SRC
   

* Packages
** MELPA
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
   '("melpa" . "https://melpa.org/packages/") t)
   '("marmalade" . "http://marmalade-repo.org/packages/")
   '("melpa-stable" . "http://stable.melpa.org/packages/")

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages
  '(ido
    elpy
    gruvbox-theme
    web-mode
    flycheck
    projectile
    py-autopep8
    persistent-scratch))
;; May need: ein

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)
#+END_SRC
   

* IDO 
Interactively Do Things
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)
(setq ido-file-extenison-order '(".py" ".org"))
#+END_SRC


* projectile
#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
#+END_SRC


* Persistent scratch
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda () (persistent-scratch-restore-from-file "~/Documents/scratch.txt")))
(persistent-scratch-autosave-mode 1)
(add-hook 'kill-emacs-hook (lambda () (persistent-scratch-save-to-file "~/Documents/scratch.txt")))
#+END_SRC


* magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC


* webmode
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-enable-current-element-highlight t)
#+END_SRC


* Org-mode

** Org-system:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-directory "~/Documents/org")
(setq org-default-notes-file "~/Documents/org/journal.org")
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "~/Documents/org/journal.org")))
(setq org-agenda-files (quote ("~/Documents/org/gtd.org")))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Documents/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/Documents/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

#+END_SRC
** spell-check for org-mode
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "<f8>") 'ispell-buffer)
  (add-hook 'org-mode-hook 'flyspell-mode))
#+END_SRC
   
** Auto-Fill mode
fill your paragraphs automatically 
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC


* Python

** spell-check for python commands
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'linum-mode)
#+END_SRC

** elpy
#+BEGIN_SRC emacs-lisp
(elpy-enable)

;; autopep8 automatically formats Python code to conform to the PEP 8 style guide.
;; enable autopep8 formatting on save
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

** Abbrev mode 
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'abbrev-mode)
;; tell emacs where to read abbrev definitions from...
(setq abbrev-file-name               
        "~/config/abbrev_defs")
;; save abbrevs when files are saved
(setq save-abbrevs 'silent)
#+END_SRC


* Themes
#+BEGIN_SRC emacs-lisp
(require 'gruvbox)
(load-theme 'gruvbox t)
#+END_SRC


* May for later
 (add-to-list 'default-frame-alist '(fullscreen . maximized))

